@startuml
participant ":__ReservationController__" as rController
participant ":__ReservationMapper__" as rMapper
participant ":__User Mapper__" as uMapper
participant "r:__Reservation__" as reservation
'multi-object
participant "reservations\n:__Reservation__" as reservations
participant ":__ReservationIdentityMap__" as rIMap
participant "ReservationUoWAspect" as UoW
participant ":__ReservationTDG__" as rTDG
participant ":__userTDG__" as uTDG
participant ":User Table" as uTable
participant ":Room Table" as rTable

[-> rController: requestReservation(room, timeslot, description, weeks)

'Multiobject
create reservations
rController -> reservations : create()

loop week := 0..weeks-1
	rController -> rMapper : countInRange(userID, startOfWeek, endOfWeek)
	rMapper -> rTDG : countInRange(userID, startOfWeek, endOfWeek)
        rTDG -> rTable : SELECT * FROM Reservation Table WHERE [...]
	rTDG --> rMapper : reservationCount
	rMapper --> rController : reservationCount

	rController -> rMapper : findForTimeslot(room, timeslot + week)
	ref over rMapper : Find Time Slot Reservations
	rMapper --> rController : waitingList

        rController -> rMapper : findAllTimeslotActive(room, timeslot + week)
	ref over rMapper : Find All Timeslot Active
	rMapper --> rController : overlap

        rController -> rMapper : statusEquipment(timeslot, markersRequest,\nlaptopsRequest, projectorsRequest, cablesRequest)
        rMapper --> rController : eStatus

        rController -> uMapper : capstone(userID)
        uMapper -> uTDG : capstone(userID)
        uTDG -> uTable : SELECT capstone from users WHERE[..]
        uTDG --> uMapper: capstone
        uMapper --> rController : capstone

	alt reservationCount >= MAX_PER_USER
		note over rController: User reached weekly reservation limit, display error
	else count(roomReservations) >= MAX_PER_TIMESLOT
		note over rController: Waiting list is full, display error
        else count(overlap) > 0
		note over rController: User already has a resservation in another room for that time, display error
	else !eStatus
		note over rController: Equipment is not available, display error
	else count(capstone) > 0 && count(waitingList)
                loop foreach waitingList as w
                       rController -> rMapper : moveDown(w)
                end
        else else
                rController -> rMapper : create(userID, room, timeslot + week, description)

		create reservation
		rMapper -> reservation : r := create(...)
		rMapper -> rIMap : add(r)
		rMapper -> UoW : registerNew(r)
		rMapper --> rController : r

		rController -> reservations : add(r)
	end
end

rController -> rMapper : done()
ref over rMapper : Complete Work
rMapper --> rController : result

loop r in reservations
	'Post-insert checks
	alt r.id != null
		rController -> rMapper : findPosition(r)
		ref over rMapper : Find Time Slot Reservations
		rMapper --> rController : position

		alt position >= MAX_PER_TIMESLOT
			rController -> rController : cancelReservation(r.id)
			ref over rController: Cancel Reservation
			'rController -> rMapper : delete(r.id)
			'rMapper -> rIMap : get(id)
			'rMapper -> UoW : registerDeleted(r)
			note over rController: The reservation exceeds the waiting list limit,\ndisplay error
		else position == 0
			note over rController : The reservation is now active, display success
		else else
			note over rController : The reservation has been placed on the waiting list,\ndisplay warning
		end
	else r.id == null
		note over rController: The new reservation was a duplicate, display error
	end
end

rController -> rMapper : done()
ref over rMapper : Complete Work
rMapper --> rController : result

[<-- rController : result
@enduml
@startuml

participant ":__ReservationController__" as rController
participant ":__ReservationMapper__" as rMapper
participant "r:__Reservation__" as reservation
participant "ReservationUoWAspect" as UoW

[-> rController: modifyReservation(resID, description)
rController -> rMapper : find(resID)
ref over rMapper : Find Reservation
rMapper --> rController : r

alt sameTime && sameEquip
	rController -> rMapper : set(...)
	rMapper -> reservation : setDescription(description)

	rMapper -> UoW : registerDirty(r)

	rController -> rMapper : done()
	ref over rMapper : Complete Work
	rMapper --> rController : result
	[<-- rController : result

else sameTime && !sameEquip
	rController -> rController : temp1 := showRequestForm(OGRoom, new)
	
	alt temp1 == null
		rMapper -> reservation : set(reservationID, desc, newMarkers, newProjectors,\n newLaptops, new Cables, oldTimelsot, newRoom )
		rMapper -> UoW : registerDirty(r)

		rController -> rMapper : done()
		ref over rMapper : Complete Work
		rController -> rController : cleanup(reservationID, newTimeslot)
		ref over rController : Cleanup
		rMapper --> rController : result
		[<-- rController : result
	end
else else
	rController -> rController : temp1 := showRequestForm(OGRoom, new)
	rController -> rController : temp2 := requestReservation(OGRoom, new)
	
	alt temp1 == null && temp2 == null
		rMapper -> reservation : cancel(oldReservationID, OGRoom,\n OGTimeslot )		
		rMapper -> UoW : registerNew(r)
		rMapper -> UoW : registerDeleted(oldR)

		rController -> rMapper : done()
		ref over rMapper : Complete Work
		rController -> rController : cleanup(reservationID, newTimeslot)
		ref over rController : Cleanup
		rMapper --> rController : result
		[<-- rController : result
	end
end
@enduml